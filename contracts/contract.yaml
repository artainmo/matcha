openapi: 3.0.1
info:
  title: Matcha REST
  description: 'This is a sample server Petstore server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore.swagger.io/v2
  - url: http://petstore.swagger.io/v2
tags:
  - name: User
    description: All about Users
paths:
  /user:
    post:
      parameters:
        - name: body
          in: query
          description: he
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              password:
                type: string
      tags:
        - User
      summary: Create a new user
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: string
                example: pufzhrv123414233GZG2352CTC4TVG65
    parameters:
      - name: userId
        in: cookie
        description: ID of the user that needs to be updated
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
    patch:
      tags:
        - User
      summary: Update a user
      parameters:
        - name: body
          in: query
          description: he
          required: true
          schema:
            $ref: '#/components/schemas/User'
      responses:
        200:
          description: Update ok
          content: {}
    get:
      tags:
        - User
      summary: Get a user and it's infos
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content: {}
  /users:
    get:
      tags:
        - Users
      summary: Get a list of users
      parameters:
        - name: age_gap
          in: query
          description: age gap {start}-{end}
          required: false
          schema:
            type: string
        - name: fame_gap
          in: query
          description: fame gap {start}-{end}
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: location and range of the user
          required: false
          schema:
            type: object
            properties:
              location:
                type: string
              range:
                type: integer
        - name: tags
          in: query
          description: list of the tags
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Tag'
      responses:
        200:
          description: ""
          content: {}
  /users/{otherUserId}/report:
    parameters:
      - name: otherUserId
        in: path
        description: the Id of the user to report
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
    post:
      tags:
        - Users
      summary: Request to report a user
      operationId: report
      responses:
        200:
          description: operation successfull
          content: {}
        404:
          description: Username not found
          content: {}
  /users/{otherUserId}/block:
    parameters:
      - name: userId
        in: cookie
        description: the Id of the user who blocks
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      - name: otherUserId
        in: path
        description: the Id of the user to block
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
    post:
      tags:
        - Users
      summary: Request to report a user
      operationId: block
      responses:
        200:
          description: operation successfull
          content: {}
        404:
          description: UserId not found
          content: {}
  /user/login:
    get:
      tags:
        - User Login
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                example: pufzhrv123414233GZG2352CTC4TVG65
        400:
          description: Invalid username/password supplied
          content: {}
        404:
          description: Username not found
          content: {}
  /user/reset:
    get:
      tags:
        - User Login
      summary: Request a link to reset password
      operationId: resetRequestUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
      responses:
        200:
          description: Mail sent
          content: {}
        400:
          description: Invalid username/password supplied
          content: {}
        404:
          description: Username not found
          content: {}
    post:
      tags:
        - User Login
      summary: send the password to set up
      operationId: resetUserPassword
      parameters:
        - name: token
          in: query
          description: The token from url
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                example: pufzhrv123414233GZG2352CTC4TVG65
        500:
          description: Issue
          content: {}
  /stats:
    parameters:
      - name: userId
        in: cookie
        description: ID of the user that needs to be updated
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
    get:
      tags:
        - User Stats
      summary: Request the stats of the user
      operationId: stats
      responses:
        200:
          description: response successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  views:
                    type: array
                    items:
                      type: string
                      example: Patrick
                  likes:
                    type: array
                    items:
                      type: string
                      example: JJ
                  fame_rate:
                    type: integer
                    format: int64
                    example: 4
        404:
          description: UserId not found
          content: {}
  /stats/like/{otherUserId}:
    parameters:
      - name: userId
        in: cookie
        description: ID of the user that needs to be updated
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      - name: otherUserId
        in: path
        description: ID of the user that needs to be updated
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
    post:
      tags:
        - User Stats
      summary: Request the stats of the user
      operationId: stats like
      responses:
        200:
          description: response successfull
          content: {}
        400:
          description: Invalid username/password supplied
          content: {}
        404:
          description: Username not found
          content: {}
  /stats/visit/{otherUserId}:
    parameters:
      - name: userId
        in: cookie
        description: ID of the user that needs to be updated
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      - name: otherUserId
        in: path
        description: ID of the user that needs to be updated
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
    post:
      tags:
        - User Stats
      summary: Request the stats of the user
      operationId: stats visits
      responses:
        200:
          description: response successfull
          content: {}
        400:
          description: Invalid username/password supplied
          content: {}
        404:
          description: Username not found
          content: {}
components:
  schemas:
    User:
      required:
        - email
        - firstName
        - gender
        - lastName
        - password
        - username
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1231
        firstName:
          type: string
          example: Pierre
        lastName:
          type: string
          example: Vanderlynden
        email:
          type: string
          example: pierre.vanderlynden@gmail.com
        password:
          type: string
          example: J'aime les licornes
        gender:
          $ref: '#/components/schemas/Gender'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/Gender'
        biography:
          type: string
          example: La pêche au ton est mon passe temps préféré mais j'aime aussi la pêche mel bush
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        pictures:
          type: array
          items:
            type: string
            example: '/userId/picture_name.png'
      xml:
        name: User
    Gender:
      type: string
      enum:
        - Male
        - Female
        - Bisexual
    Tag:
      type: string
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
